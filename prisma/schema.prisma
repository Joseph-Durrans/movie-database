generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "neutral"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.sqlite"
}

// model Cover {
//   id        Int      @id @default(autoincrement())
//   url       String   @unique
//   alt       String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Movie     Movie[]
// }

model Movie {
  id              Int               @id @default(autoincrement())
  title           String
  releaseDate     DateTime?
  runtime         Int?
  overview        String?
  budget          Int?
  revenue         Int?
  cover           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MovieActor      MovieActor[]
  MovieCrewMember MovieCrewMember[]
  MovieDirector   MovieDirector[]
  MovieGenre      MovieGenre[]
}

model Genre {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  MovieGenre MovieGenre[]
}

model MovieGenre {
  movieId   Int
  genreId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  genre     Genre    @relation(fields: [genreId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])

  @@id([movieId, genreId])
}

model Actor {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  MovieActor MovieActor[]
}

model MovieActor {
  movieId   Int
  actorId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  actor     Actor    @relation(fields: [actorId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])

  @@id([movieId, actorId])
}

model Director {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  MovieDirector MovieDirector[]
}

model MovieDirector {
  movieId    Int
  directorId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  director   Director @relation(fields: [directorId], references: [id])
  movie      Movie    @relation(fields: [movieId], references: [id])

  @@id([movieId, directorId])
}

model CrewMember {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MovieCrewMember MovieCrewMember[]
}

model MovieCrewMember {
  movieId      Int
  crewMemberId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  crewMember   CrewMember @relation(fields: [crewMemberId], references: [id])
  movie        Movie      @relation(fields: [movieId], references: [id])

  @@id([movieId, crewMemberId])
}
