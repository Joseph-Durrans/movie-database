generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "neutral"
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.sqlite"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Cover {
//   id        Int      @id @default(autoincrement())
//   url       String   @unique
//   alt       String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Movie     Movie[]
// }

model Movie {
  id          Int          @id @default(autoincrement())
  title       String
  overview    String?
  posterPath  String?
  runtime     Int?
  budget      BigInt?
  revenue     BigInt?
  releaseDate DateTime?
  voteAverage Float?
  voteCount   Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  movieGenre  MovieGenre[]
  cast        Cast[]
  crew        Crew[]
}

model Genre {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  movieGenre MovieGenre[]
}

model MovieGenre {
  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  genreId   Int
  genre     Genre    @relation(fields: [genreId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([movieId, genreId])
}

model Person {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  crew      Crew[]
  cast      Cast[]
}

model Cast {
  id        String   @id @default(cuid())
  personId  Int
  person    Person   @relation(fields: [personId], references: [id])
  character String
  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Crew {
  id        String   @id @default(cuid())
  personId  Int
  person    Person   @relation(fields: [personId], references: [id])
  job       String
  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Actor {
//   id         Int          @id @default(autoincrement())
//   name       String       @unique
//   createdAt  DateTime     @default(now())
//   updatedAt  DateTime     @updatedAt
//   MovieActor MovieActor[]
// }

// model MovieActor {
//   movieId   Int
//   actorId   Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   actor     Actor    @relation(fields: [actorId], references: [id])
//   movie     Movie    @relation(fields: [movieId], references: [id])

//   @@id([movieId, actorId])
// }

// model Director {
//   id            Int             @id @default(autoincrement())
//   name          String          @unique
//   createdAt     DateTime        @default(now())
//   updatedAt     DateTime        @updatedAt
//   MovieDirector MovieDirector[]
// }

// model MovieDirector {
//   movieId    Int
//   directorId Int
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   director   Director @relation(fields: [directorId], references: [id])
//   movie      Movie    @relation(fields: [movieId], references: [id])

//   @@id([movieId, directorId])
// }

// model CrewMember {
//   id              Int               @id @default(autoincrement())
//   name            String            @unique
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt
//   MovieCrewMember MovieCrewMember[]
// }

// model MovieCrewMember {
//   movieId      Int
//   crewMemberId Int
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt
//   crewMember   CrewMember @relation(fields: [crewMemberId], references: [id])
//   movie        Movie      @relation(fields: [movieId], references: [id])

//   @@id([movieId, crewMemberId])
// }
